[model]
state_dim = 14
#state_dim - own 9 states [px, py, vx, vy, r],[pxg, pyg, vpref, heading angle] and 5 observed for the other agent
gamma = 0.8


[init]
traj_dir = data/multi_sim
num_epochs = 250



[train]

learning_rate = 0.01

step_size = 150
#step_size - no of steps taken before an episode decides that no solution was found

train_episodes = 200
#train_episodes - total no of episodes for which the model trains, model is updated after every train episode

sample_episodes = 10
#sample_episodes - number of episodes run before updating the model. No of episodes to be run per train episode

test_interval = 200
test_episodes = 100

epsilon_start = 0.5
epsilon_end = 0.1
epsilon_decay = 150


batch_size = 100
capacity = 40000
num_epochs = 30

checkpoint_interval = 30



[step_size - no of steps taken before an episode decides that no solution was found]

[sample_episodes - no of episodes ]

[batch_size - [torch arg parameter, number of samples to load per batch]]
[capacity - number of past experiences (positions) that are kept - see ReplayMemory class in utils.py]
[epsilon = epsilon_start + (epsilon_end - epsilon_start) / epsilon_decay * episode]
[checkpoint - save model every 30 episodes]
